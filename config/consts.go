package config


const RESOURCE_FOLDER = "./resources/"
const JAVA_DIR = RESOURCE_FOLDER + "example-app/src/main/java/fr/diginamic/" 
var PRIMITIVES = []string {
}

//map of java classes in the java.lang package associated with their description
var javaLang map[string]string

func init() {
    javaLang["AbstractMethodError"] = "Thrown when an application tries to call an abstract method."
    javaLang["Appendable"] = "An object to which char sequences and values can be appended."
    javaLang["ArithmeticException"] = "Thrown when an exceptional arithmetic condition has occurred."
    javaLang["ArrayIndexOutOfBoundsException"] = "Thrown to indicate that an array has been accessed with an illegal index."
    javaLang["ArrayStoreException"] = "Thrown to indicate that an attempt has been made to store the wrong type of object into an array of objects."
    javaLang["AssertionError"] = "Thrown to indicate that an assertion has failed."
    javaLang["AutoCloseable"] = "An object that may hold resources (such as file or socket handles) until it is closed."
    javaLang["Boolean"] = "The Boolean class wraps a value of the primitive type boolean in an object."
    javaLang["BootstrapMethodError"] = "Thrown to indicate that an invokedynamic instruction or a dynamic constant failed to resolve its bootstrap method and arguments, or for invokedynamic instruction the bootstrap method has failed to provide a call site with a target of the correct method type, or for a dynamic constant the bootstrap method has failed to provide a constant value of the required type."
    javaLang["Byte"] = "The Byte class wraps a value of primitive type byte in an object."
    javaLang["Character"] = "The Character class wraps a value of the primitive type char in an object."
    javaLang["Character.Subset"] = "Instances of this class represent particular subsets of the Unicode character set."
    javaLang["Character.UnicodeBlock"] = "A family of character subsets representing the character blocks in the Unicode specification."
    javaLang["Character.UnicodeScript"] = "A family of character subsets representing the character scripts defined in the Unicode Standard Annex #24: Script Names."
    javaLang["CharSequence"] = "A CharSequence is a readable sequence of char values."
    javaLang["Class<T>"] = "Instances of the class Class represent classes and interfaces in a running Java application."
    javaLang["ClassCastException"] = "Thrown to indicate that the code has attempted to cast an object to a subclass of which it is not an instance."
    javaLang["ClassCircularityError"] = "Thrown when the Java Virtual Machine detects a circularity in the superclass hierarchy of a class being loaded."
    javaLang["ClassFormatError"] = "Thrown when the Java Virtual Machine attempts to read a class file and determines that the file is malformed or otherwise cannot be interpreted as a class file."
    javaLang["ClassLoader"] = "A class loader is an object that is responsible for loading classes."
    javaLang["ClassNotFoundException"] = "Thrown when an application tries to load in a class through its string name using: The forName method in class Class."
    javaLang["ClassValue<T>"] = "Lazily associate a computed value with (potentially) every type."
    javaLang["Cloneable"] = "A class implements the Cloneable interface to indicate to the Object.clone() method that it is legal for that method to make a field-for-field copy of instances of that class."
    javaLang["CloneNotSupportedException"] = "Thrown to indicate that the clone method in class Object has been called to clone an object, but that the object's class does not implement the Cloneable interface."
    javaLang["Comparable<T>"] = "This interface imposes a total ordering on the objects of each class that implements it."
    javaLang["Compiler"] = "Deprecated, for removal: This API element is subject to removal in a future version."
    javaLang["Deprecated"] = "A program element annotated @Deprecated is one that programmers are discouraged from using."
    javaLang["Double"] = "The Double class wraps a value of the primitive type double in an object."
    javaLang["Enum<E extends Enum<E>>"] = "This is the common base class of all Java language enumeration classes."
    javaLang["Enum.EnumDesc<E extends Enum<E>>"] = "A nominal descriptor for an enum constant."
    javaLang["EnumConstantNotPresentException"] = "Thrown when an application tries to access an enum constant by name and the enum type contains no constant with the specified name."
    javaLang["Error"] = "An Error is a subclass of Throwable that indicates serious problems that a reasonable application should not try to catch."
    javaLang["Exception"] = "The class Exception and its subclasses are a form of Throwable that indicates conditions that a reasonable application might want to catch."
    javaLang["ExceptionInInitializerError"] = "Signals that an unexpected exception has occurred in a static initializer."
    javaLang["Float"] = "The Float class wraps a value of primitive type float in an object."
    javaLang["FunctionalInterface"] = "An informative annotation type used to indicate that an interface type declaration is intended to be a functional interface as defined by the Java Language Specification."
    javaLang["IllegalAccessError"] = "Thrown if an application attempts to access or modify a field, or to call a method that it does not have access to."
    javaLang["IllegalAccessException"] = "An IllegalAccessException is thrown when an application tries to reflectively create an instance (other than an array), set or get a field, or invoke a method, but the currently executing method does not have access to the definition of the specified class, field, method or constructor."
    javaLang["IllegalArgumentException"] = "Thrown to indicate that a method has been passed an illegal or inappropriate argument."
    javaLang["IllegalCallerException"] = "Thrown to indicate that a method has been called by an inappropriate caller."
    javaLang["IllegalMonitorStateException"] = "Thrown to indicate that a thread has attempted to wait on an object's monitor or to notify other threads waiting on an object's monitor without owning the specified monitor."
    javaLang["IllegalStateException"] = "Signals that a method has been invoked at an illegal or inappropriate time."
    javaLang["IllegalThreadStateException"] = "Thrown to indicate that a thread is not in an appropriate state for the requested operation."
    javaLang["IncompatibleClassChangeError"] = "Thrown when an incompatible class change has occurred to some class definition."
    javaLang["IndexOutOfBoundsException"] = "Thrown to indicate that an index of some sort (such as to an array, to a string, or to a vector) is out of range."
    javaLang["InheritableThreadLocal<T>"] = "This class extends ThreadLocal to provide inheritance of values from parent thread to child thread: when a child thread is created, the child receives initial values for all inheritable thread-local variables for which the parent has values."
    javaLang["InstantiationError"] = "Thrown when an application tries to use the Java new construct to instantiate an abstract class or an interface."
    javaLang["InstantiationException"] = "Thrown when an application tries to create an instance of a class using the newInstance method in class Class, but the specified class object cannot be instantiated."
    javaLang["Integer"] = "The Integer class wraps a value of the primitive type int in an object."
    javaLang["InternalError"] = "Thrown to indicate some unexpected internal error has occurred in the Java Virtual Machine."
    javaLang["InterruptedException"] = "Thrown when a thread is waiting, sleeping, or otherwise occupied, and the thread is interrupted, either before or during the activity."
    javaLang["Iterable<T>"] = "Implementing this interface allows an object to be the target of the enhanced for statement (sometimes called the 'for-each loop' statement)."
    javaLang["LayerInstantiationException"] = "Thrown when creating a module layer fails."
    javaLang["LinkageError"] = "Subclasses of LinkageError indicate that a class has some dependency on another class; however, the latter class has incompatibly changed after the compilation of the former class."
    javaLang["Long"] = "The Long class wraps a value of the primitive type long in an object."
    javaLang["Math"] = "The class Math contains methods for performing basic numeric operations such as the elementary exponential, logarithm, square root, and trigonometric functions."
    javaLang["Module"] = "Represents a run-time module, either named or unnamed."
    javaLang["ModuleLayer"] = "A layer of modules in the Java virtual machine."
    javaLang["ModuleLayer.Controller"] = "Controls a module layer."
    javaLang["NegativeArraySizeException"] = "Thrown if an application tries to create an array with negative size."
    javaLang["NoClassDefFoundError"] = "Thrown if the Java Virtual Machine or a ClassLoader instance tries to load in the definition of a class (as part of a normal method call or as part of creating a new instance using the new expression) and no definition of the class could be found."
    javaLang["NoSuchFieldError"] = "Thrown if an application tries to access or modify a specified field of an object, and that object no longer has that field."
    javaLang["NoSuchFieldException"] = "Signals that the class doesn't have a field of a specified name."
    javaLang["NoSuchMethodError"] = "Thrown if an application tries to call a specified method of a class (either static or instance), and that class no longer has a definition of that method."
    javaLang["NoSuchMethodException"] = "Thrown when a particular method cannot be found."
    javaLang["NullPointerException"] = "Thrown when an application attempts to use null in a case where an object is required."
    javaLang["Number"] = "The abstract class Number is the superclass of platform classes representing numeric values that are convertible to the primitive types byte, double, float, int, long, and short."
    javaLang["NumberFormatException"] = "Thrown to indicate that the application has attempted to convert a string to one of the numeric types, but that the string does not have the appropriate format."
    javaLang["Object"] = "Class Object is the root of the class hierarchy."
    javaLang["OutOfMemoryError"] = "Thrown when the Java Virtual Machine cannot allocate an object because it is out of memory, and no more memory could be made available by the garbage collector."
    javaLang["Override"] = "Indicates that a method declaration is intended to override a method declaration in a supertype."
    javaLang["Package"] = "Represents metadata about a run-time package associated with a class loader."
    javaLang["Process"] = "Process provides control of native processes started by ProcessBuilder.start and Runtime.exec."
    javaLang["ProcessBuilder"] = "This class is used to create operating system processes."
    javaLang["ProcessBuilder.Redirect"] = "Represents a source of subprocess input or a destination of subprocess output."
    javaLang["ProcessBuilder.Redirect.Type"] = "The type of a ProcessBuilder.Redirect."
    javaLang["ProcessHandle"] = "ProcessHandle identifies and provides control of native processes."
    javaLang["ProcessHandle.Info"] = "Information snapshot about the process."
    javaLang["Readable"] = "A Readable is a source of characters."
    javaLang["Record"] = "This is the common base class of all Java language record classes."
    javaLang["ReflectiveOperationException"] = "Common superclass of exceptions thrown by reflective operations in core reflection."
    javaLang["Runnable"] = "The Runnable interface should be implemented by any class whose instances are intended to be executed by a thread."
    javaLang["Runtime"] = "Every Java application has a single instance of class Runtime that allows the application to interface with the environment in which the application is running."
    javaLang["Runtime.Version"] = "A representation of a version string for an implementation of the Java SE Platform."
    javaLang["RuntimeException"] = "RuntimeException is the superclass of those exceptions that can be thrown during the normal operation of the Java Virtual Machine."
    javaLang["RuntimePermission"] = "This class is for runtime permissions."
    javaLang["SafeVarargs"] = "A programmer assertion that the body of the annotated method or constructor does not perform potentially unsafe operations on its varargs parameter."
    javaLang["SecurityException"] = "Thrown by the security manager to indicate a security violation."
    javaLang["SecurityManager"] = "Deprecated, for removal: This API element is subject to removal in a future version."
    javaLang["Short"] = "The Short class wraps a value of primitive type short in an object."
    javaLang["StackOverflowError"] = "Thrown when a stack overflow occurs because an application recurses too deeply."
    javaLang["StackTraceElement"] = "An element in a stack trace, as returned by Throwable.getStackTrace()."
    javaLang["StackWalker"] = "A stack walker."
    javaLang["StackWalker.Option"] = "Stack walker option to configure the stack frame information obtained by a StackWalker."
    javaLang["StackWalker.StackFrame"] = "A StackFrame object represents a method invocation returned by StackWalker."
    javaLang["StrictMath"] = "The class StrictMath contains methods for performing basic numeric operations such as the elementary exponential, logarithm, square root, and trigonometric functions."
    javaLang["String"] = "The String class represents character strings."
    javaLang["StringBuffer"] = "A thread-safe, mutable sequence of characters."
    javaLang["StringBuilder"] = "A mutable sequence of characters."
    javaLang["StringIndexOutOfBoundsException"] = "Thrown by String methods to indicate that an index is either negative or greater than the size of the string."
    javaLang["SuppressWarnings"] = "Indicates that the named compiler warnings should be suppressed in the annotated element (and in all program elements contained in the annotated element)."
    javaLang["System"] = "The System class contains several useful class fields and methods."
    javaLang["System.Logger"] = "System.Logger instances log messages that will be routed to the underlying logging framework the LoggerFinder uses."
    javaLang["System.Logger.Level"] = "System loggers levels."
    javaLang["System.LoggerFinder"] = "The LoggerFinder service is responsible for creating, managing, and configuring loggers to the underlying framework it uses."
    javaLang["Thread"] = "A thread is a thread of execution in a program."
    javaLang["Thread.State"] = "A thread state."
    javaLang["Thread.UncaughtExceptionHandler"] = "Interface for handlers invoked when a Thread abruptly terminates due to an uncaught exception."
    javaLang["ThreadDeath"] = "An instance of ThreadDeath is thrown in the victim thread when the (deprecated) Thread.stop() method is invoked."
    javaLang["ThreadGroup"] = "A thread group represents a set of threads."
    javaLang["ThreadLocal<T>"] = "This class provides thread-local variables."
    javaLang["Throwable"] = "The Throwable class is the superclass of all errors and exceptions in the Java language."
    javaLang["TypeNotPresentException"] = "Thrown when an application tries to access a type using a string representing the type's name, but no definition for the type with the specified name can be found."
    javaLang["UnknownError"] = "Thrown when an unknown but serious exception has occurred in the Java Virtual Machine."
    javaLang["UnsatisfiedLinkError"] = "Thrown if the Java Virtual Machine cannot find an appropriate native-language definition of a method declared native."
    javaLang["UnsupportedClassVersionError"] = "Thrown when the Java Virtual Machine attempts to read a class file and determines that the major and minor version numbers in the file are not supported."
    javaLang["UnsupportedOperationException"] = "Thrown to indicate that the requested operation is not supported."
    javaLang["VerifyError"] = "Thrown when the \"verifier\" detects that a class file, though well formed, contains some sort of internal inconsistency or security problem."
    javaLang["VirtualMachineError"] = "Thrown to indicate time.Duration(1).Seconds() the Java Virtual Machine is broken or has run out of resources necessary for it to continue operating."
    javaLang["Void"]=""
}

